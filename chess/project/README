  ~~~~ TEAM ~~~~
Name: Elysa Pulliam
JHED ID: epullia1

Name: Jonathan Locala
JHED ID: jlocala1

Name: Rad Couture
JHED ID: rcoutur1


 ~~~~ DESIGN ~~~~
Explanation of overall design
- we followed the skeleton code provided but added few helper functions to help increase
readability and test edges cases. We will further explain those extra functions down below.

For our point_value implementation, we had to make sure that it worked for the mystery piece as well. To do this, we created a pure virtual function point_value() in Piece.h, and also overrided said function with each piece's real point value within the header files of each individual subclass. For the mystery piece, we did the same in Mystery.h, but we initialized the point value to 3 as a placeholder for the autograder to override.

Function: remove_piece():
	  -This is a helper funtion in make_move that allows us to remove a piece we
	  moved on the board if it puts us in check; ie, in chess you aren't
	  allowed to put yourself in check only opponents can do that thus
	  if you put your self in check we throw error message and then remove
	  the piece you moved and make you try again.

Function: is_valid_designator():
	  - this function just makes sure the pieces on the board are the standard
	  ones or "M" /"m" for mystery
Function: position_exists():
	- this is more of an edge case check. Just ensures that when we add a piece
	onto the board, it is actually going to an existing spot on the board

Function: find_king():
	  - this is a function in main implemented in_check and in_mate because
	  a lot of the logic in those funcctions surrounds the position of the king
	  and the available moves given the kings position.
Function: erase():
	  - A helper function for loading a new board because this helper function
	  erases(removes) all of the pieces from the old board and then adds pieces
	  in their place. Necessary because we created that clear_path function that
	  won't let you blindly move pieces to spots already occupied.
Function: path_clear():
	  - this is a helper function implemented in make_move to check whether
	  or not there are pieces in the way of another piece thus prohibiting it
	  to move.
Function: promote_pawn():
	  - a function we use in make_move to check whether or not a piece with a 'p'
	  or 'P' designator has reached the opponent side before switching it to a
	  queen. "Q" or "q" depending on the pawn color
	  
Function: Game():
	  - a copy constructor that allows us to create temporary games to simulate
	  moves without affecting the actual board.
Function: Game& operator=():
	  -When creating our coopy constructor we have a statement that sets
	  the tempGame = to the current actual game so we overloaded the equal sign
	  so that logic could work.

Function: verticalSearch()
	  - A helper function for path_clear(), verticalSearch checks the column that 
	  the piece is trying to move in, and checks to see if there is a piece in the way that would prevent the move/capture from occuring.

Function: horizontalSearch()
	  - A helper function for path_clear(), horizontalSearch checks the row that 
	  the piece is trying to move in, and checks to see if there is a piece in the way that would prevent the move/capture from occuring.

Function: bottomRightDiagonal()
	  - A helper function for path_clear(), bottomRightDiagonal checks the lower right 
	  diagonal compared to the piece, and checks to see if there is a piece in the way that would prevent the move/capture from occuring.

Function: bottomLeftDiagonal()
	  - A helper function for path_clear(), bottomLeftDiagonal checks the lower left 
	  diagonal compared to the piece, and checks to see if there is a piece in the way that would prevent the move/capture from occuring.

Function: topRightDiagonal()
	  - A helper function for path_clear(), topRightDiagonal checks the upper right 
	  diagonal compared to the piece, and checks to see if there is a piece in the way that would prevent the move/capture from occuring.

Function: topLeftDiagonal()
	  - A helper function for path_clear(), topLeftDiagonal checks the upper left 
	  diagonal compared to the piece, and checks to see if there is a piece in the way that would prevent the move/capture from occuring.

~~~~ COMPLETENESS ~~~~
Our solution is finished (at least finished to the extent that we know)

 ~~~~ SPECIAL INSTRUTCIONS ~~~~

	- N/A

 ~~~~ OTHER ~~~~

    - N/A